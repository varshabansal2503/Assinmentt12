ANS:1---
 Delete the Middle Node of a Linked List
class Solution {
    public ListNode deleteMiddle(ListNode head) {
        if(head.next==null)
        {
            return null;
        }
        int countnodes=0;
        ListNode temp=head;
        while(temp!=null)
        {
            temp=temp.next;
            countnodes++;
        }
        int n=(countnodes/2)-1;
        temp=head;
        while(n!=0)
        {
            temp=temp.next;
            n--;
        }
        temp.next=temp.next.next;
        return head;
       
        
    }
}
--------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:2--    Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.
class Solution {
    public ListNode middleNode(ListNode head) {
        if(head.next==null && head==null)
        {
            return null;
        }
        int countnodes=0;
        ListNode temp=head;
        while(temp!=null)
        {
            temp=temp.next;
            countnodes++;
        }
        int n=(countnodes/2);
        temp=head;
        while(n!=0)
        {
            temp=temp.next;
            n--;
        }
        return temp;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:3--
Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANS:4---
Given the head of a linked list, remove the nth node from the end of the list and return its head.
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
     int sz=0;
     ListNode temp=head;
     while(temp!=null)
     {
         temp=temp.next;
         sz++;
     }
     if(n==sz)
     {
         head=head.next;
         return head;
     }
     int i=1;
     int findi=sz-n;
     ListNode prev=head;

     while(i<findi)
     {
        prev=prev.next;
        i++;
     }
      prev.next=prev.next.next;
     return head;
    }
    
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------
ans:5-- Remove Duplicates from Sorted List..
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        

        if(head==null||head.next==null)
            return head;
        ListNode slow = head;
        ListNode fast = head.next;

        while(fast!=null){
            if(slow.val==fast.val){
                slow.next=fast.next;
            }else{
                slow=slow.next;
            }
            fast=fast.next;
        }

        return head;
    }
    
}

